package com.msa.customPlugin;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.apache.maven.model.ActivationProperty;
import org.apache.maven.model.Dependency;
import org.apache.maven.model.Developer;
import org.apache.maven.model.Plugin;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;

//Goal ismi = summarize.
@Mojo(name = "summarize", defaultPhase = LifecyclePhase.INSTALL)
public class CustomPlugin extends AbstractMojo {

	// Maven project nesnesi gonderilsin
	@Parameter(defaultValue = "${project}", required = true)
	private MavenProject project;

	@Parameter(defaultValue = "${project.build.directory}\\outPut", required = true)
	private File outputDirectory;

	private String projectVersiyon;
	private String groupId;
	private String artifactId;

	/*
	 * 
	 * Release.date eksik
	 */

	public void execute() throws MojoExecutionException, MojoFailureException {

		File f = outputDirectory;
		if (!f.exists()) {
			f.mkdirs();
		}
		File touch = new File(f, "outPut.txt");
		FileWriter w = null;

		projectVersiyon = project.getVersion();
		groupId = project.getGroupId();
		artifactId = project.getArtifactId();

		writeFile("Project Info : " + groupId + "." + artifactId + "." + projectVersiyon, w, touch);

		List<Developer> developers = project.getDevelopers();
		writeFile(" Developers ", w, touch);
		for (Developer developer : developers) {
			getLog().info("Developer " + developer.getId() + ": " + developer.getName());
			writeFile("Developer " + developer.getId() + ": " + developer.getName() + " ", w, touch);
		}

		List<Dependency> dependecies = project.getDependencies();
		Map<String, String> hashDependencies = new HashMap<String, String>();

		writeFile(" Dependencies ", w, touch);
		for (Dependency dependency : dependecies) {
			getLog().info("Dependency :" + dependency.getGroupId() + dependency.getArtifactId());
			writeFile("Dependency: " + dependency.getGroupId() + dependency.getArtifactId() + " ", w, touch);
		}

		List<Plugin> plugins = project.getBuildPlugins();
		writeFile(" Plugins ", w, touch);
		for (Plugin plugin : plugins) {
			getLog().info("Plugin :" + plugin.getArtifactId());
			writeFile("Plugin: " + plugin.getArtifactId() + " ", w, touch);
		}

		getLog().info(dependecies.size() + " :dependecies size");
		getLog().info(developers.size() + " :developers size");
		getLog().info(plugins.size() + " :plugin size");
		getLog().info(projectVersiyon + " :projectVersiyon");
		getLog().info(groupId + " :groupId");
		getLog().info(artifactId + " :artifactId");

	}

	public void writeFile(String details, FileWriter w, File touch) throws MojoExecutionException {

		try {
			w = new FileWriter(touch, true);
			w.write(details);
		} catch (IOException e) {
			throw new MojoExecutionException("Error creating file " + touch, e);
		} finally {
			if (w != null) {
				try {
					w.close();
				} catch (IOException e) {
					// ignore
				}
			}
		}
	}
}
